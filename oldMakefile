#------------------------------------------------------------------------------#
# This makefile was generated by 'cbp2make' tool rev.147                       #
#------------------------------------------------------------------------------#


WORKDIR = `pwd`

CC = gcc
CXX = g++
AR = ar
LD = g++
WINDRES = windres

# INC = -I/usr/include/opencv -I/opt/vc/include -I/opt/vc/include/interface/vcos -I/opt/vc/include/interface/vcos/pthreads -I/opt/vc/include/interface/vmcs_host/linux -I/opt/vc/include/host_applications/linux/libs/bcm_host/include -Isrc -I/usr/local/include

GL_INCS = 
GL_LIBS = -lGLESv2 -lEGL

SDL_INCS =  
SDL_LIBS = `sdl2-config --libs` -lSDL2_image -lSDL2_gfx -lSDL2_ttf
#-lSDL -lSDL_image -lSDL_gfx -lSDL_ttf

ONION_DIR = ../onion/build
ONION_INCS = -I$(ONION_DIR)/src/ -L$(ONION_DIR)/src/onion/ -L$(ONION_DIR)/src/handlers/  -L/usr/share
ONION_LIBS = -lonion_static -lonion_extras

OPENCV_INCS = -I/usr/local/include/opencv
OPENCV_LIBS = -lopencv_core -lopencv_imgproc -lopencv_objdetect

MMAL_INCS = -I/opt/vc/include -I/opt/vc/include/interface/vcos -I/opt/vc/include/interface/vcos/pthreads -I/opt/vc/include/interface/vmcs_host/linux -I/opt/vc/include/host_applications/linux/libs/bcm_host/include
MMAL_LIBS = -lmmal_core -lmmal_util -lmmal_vc_client -lvcos -lbcm_host


INC = $(GL_INCS) $(SDL_INCS) $(ONION_INCS) $(OPENCV_INCS) $(MMAL_INCS) -Isrc -I/usr/include -I/usr/local/include -L/usr/local/lib
CFLAGS = -Wall -pg `sdl2-config --cflags` -fpermissive
RESINC =

# LIBDIR = -L/usr/lib/x86_64-linux-gnu -L/usr/lib/arm-linux-gnueabihf -L/opt/vc/lib -L/usr/local/lib -L/home/keymaster/onion/build/src/onion/handlers
# LIB = -lSDL -lSDL_image -lSDL_gfx -lSDL_ttf -lsqlite3 -lwiringPi -lrt -lpthread -lmmal_core -lmmal_util -lmmal_vc_client -lvcos -lbcm_host -lGLESv2 -lEGL -lopencv_core -lopencv_imgproc -lopencv_objdetect -lcurl -lonion_handlers_static -lonion_static -lonion_extras -lpng12 -ljpeg -lgnutls -lgcrypt

LIBDIR = -L/usr/lib/x86_64-linux-gnu -L/usr/lib/arm-linux-gnueabihf -L/opt/vc/lib -L/usr/local/lib
LIB = -ljpeg -lpng -lbsd -lgnutls -lgcrypt -lsqlite3 -lwiringPi -lrt -lpthread -lcurl $(GL_LIBS) $(SDL_LIBS) $(ONION_LIBS) $(OPENCV_LIBS) $(MMAL_LIBS)
LDFLAGS = -pg -Wl,-rpath,/opt/vc/lib -rdynamic -mapcs-frame

SRCDIR = src

INC_DEBUG = $(INC)
CFLAGS_DEBUG = $(CFLAGS) -g -O0 -rdynamic
RESINC_DEBUG = $(RESINC)
RCFLAGS_DEBUG = $(RCFLAGS)
LIBDIR_DEBUG = $(LIBDIR)
LIB_DEBUG = $(LIB)
LDFLAGS_DEBUG = $(LDFLAGS)
OBJDIR_DEBUG = obj/Debug
DEP_DEBUG = 
OUT_DEBUG = bin/Debug/gatekeeper

INC_RELEASE = $(INC)
CFLAGS_RELEASE = $(CFLAGS) -O2
RESINC_RELEASE = $(RESINC)
RCFLAGS_RELEASE = $(RCFLAGS)
LIBDIR_RELEASE = $(LIBDIR)
LIB_RELEASE = $(LIB)
LDFLAGS_RELEASE = $(LDFLAGS) -s
OBJDIR_RELEASE = obj/Release
DEP_RELEASE = 
OUT_RELEASE = bin/Release/gatekeeper

OBJ_DEBUG = $(OBJDIR_DEBUG)/database.o $(OBJDIR_DEBUG)/wiegand.o $(OBJDIR_DEBUG)/ts_util.o $(OBJDIR_DEBUG)/main.o $(OBJDIR_DEBUG)/graphics.o $(OBJDIR_DEBUG)/Event.o $(OBJDIR_DEBUG)/cameracontrol.o $(OBJDIR_DEBUG)/camera.o $(OBJDIR_DEBUG)/Timer.o $(OBJDIR_DEBUG)/webinterface.o

OBJ_RELEASE = $(OBJDIR_RELEASE)/database.o $(OBJDIR_RELEASE)/wiegand.o $(OBJDIR_RELEASE)/ts_util.o $(OBJDIR_RELEASE)/main.o $(OBJDIR_RELEASE)/graphics.o $(OBJDIR_RELEASE)/Event.o $(OBJDIR_RELEASE)/cameracontrol.o $(OBJDIR_RELEASE)/camera.o $(OBJDIR_RELEASE)/Timer.o $(OBJDIR_RELEASE)/webinterface.o

all: debug release

clean: clean_debug clean_release

before_debug: 
	test -d bin/Debug || mkdir -p bin/Debug
	test -d $(OBJDIR_DEBUG) || mkdir -p $(OBJDIR_DEBUG)

after_debug: 

debug: before_debug out_debug after_debug

out_debug: before_debug $(OBJ_DEBUG) $(DEP_DEBUG)
	$(LD) $(LIBDIR_DEBUG) -o $(OUT_DEBUG) $(OBJ_DEBUG)  $(LDFLAGS_DEBUG) $(LIB_DEBUG)

$(OBJDIR_DEBUG)/database.o: $(SRCDIR)/database.cpp
	$(CXX) $(CFLAGS_DEBUG) $(INC_DEBUG) -c $(SRCDIR)/database.cpp -o $(OBJDIR_DEBUG)/database.o

$(OBJDIR_DEBUG)/wiegand.o: $(SRCDIR)/wiegand.cpp
	$(CXX) $(CFLAGS_DEBUG) $(INC_DEBUG) -c $(SRCDIR)/wiegand.cpp -o $(OBJDIR_DEBUG)/wiegand.o

$(OBJDIR_DEBUG)/ts_util.o: $(SRCDIR)/ts_util.cpp
	$(CXX) $(CFLAGS_DEBUG) $(INC_DEBUG) -c $(SRCDIR)/ts_util.cpp -o $(OBJDIR_DEBUG)/ts_util.o

$(OBJDIR_DEBUG)/main.o: $(SRCDIR)/main.cpp
	$(CXX) $(CFLAGS_DEBUG) $(INC_DEBUG) -c $(SRCDIR)/main.cpp -o $(OBJDIR_DEBUG)/main.o

$(OBJDIR_DEBUG)/graphics.o: $(SRCDIR)/graphics.cpp
	$(CXX) $(CFLAGS_DEBUG) $(INC_DEBUG) -c $(SRCDIR)/graphics.cpp -o $(OBJDIR_DEBUG)/graphics.o

$(OBJDIR_DEBUG)/Event.o: $(SRCDIR)/Event.cpp
	$(CXX) $(CFLAGS_DEBUG) $(INC_DEBUG) -c $(SRCDIR)/Event.cpp -o $(OBJDIR_DEBUG)/Event.o

$(OBJDIR_DEBUG)/cameracontrol.o: $(SRCDIR)/cameracontrol.cpp
	$(CXX) $(CFLAGS_DEBUG) $(INC_DEBUG) -c $(SRCDIR)/cameracontrol.cpp -o $(OBJDIR_DEBUG)/cameracontrol.o

$(OBJDIR_DEBUG)/camera.o: $(SRCDIR)/camera.cpp
	$(CXX) $(CFLAGS_DEBUG) $(INC_DEBUG) -c $(SRCDIR)/camera.cpp -o $(OBJDIR_DEBUG)/camera.o

$(OBJDIR_DEBUG)/Timer.o: $(SRCDIR)/Timer.cpp
	$(CXX) $(CFLAGS_DEBUG) $(INC_DEBUG) -c $(SRCDIR)/Timer.cpp -o $(OBJDIR_DEBUG)/Timer.o

$(OBJDIR_DEBUG)/webinterface.o: $(SRCDIR)/webinterface.cpp
	$(CXX) $(CFLAGS_DEBUG) $(INC_DEBUG) -c $(SRCDIR)/webinterface.cpp -o $(OBJDIR_DEBUG)/webinterface.o

clean_debug: 
	rm -f $(OBJ_DEBUG) $(OUT_DEBUG)
	rm -rf bin/Debug
	rm -rf $(OBJDIR_DEBUG)

before_release: 
	test -d bin/Release || mkdir -p bin/Release
	test -d $(OBJDIR_RELEASE) || mkdir -p $(OBJDIR_RELEASE)

after_release: 

release: before_release out_release after_release

out_release: before_release $(OBJ_RELEASE) $(DEP_RELEASE)
	$(LD) $(LIBDIR_RELEASE) -o $(OUT_RELEASE) $(OBJ_RELEASE)  $(LDFLAGS_RELEASE) $(LIB_RELEASE)

$(OBJDIR_RELEASE)/database.o: $(SRCDIR)/database.cpp
	$(CXX) $(CFLAGS_RELEASE) $(INC_RELEASE) -c $(SRCDIR)/database.cpp -o $(OBJDIR_RELEASE)/database.o

$(OBJDIR_RELEASE)/wiegand.o: $(SRCDIR)/wiegand.cpp
	$(CXX) $(CFLAGS_RELEASE) $(INC_RELEASE) -c $(SRCDIR)/wiegand.cpp -o $(OBJDIR_RELEASE)/wiegand.o

$(OBJDIR_RELEASE)/ts_util.o: $(SRCDIR)/ts_util.cpp
	$(CXX) $(CFLAGS_RELEASE) $(INC_RELEASE) -c $(SRCDIR)/ts_util.cpp -o $(OBJDIR_RELEASE)/ts_util.o

$(OBJDIR_RELEASE)/main.o: $(SRCDIR)/main.cpp
	$(CXX) $(CFLAGS_RELEASE) $(INC_RELEASE) -c $(SRCDIR)/main.cpp -o $(OBJDIR_RELEASE)/main.o

$(OBJDIR_RELEASE)/graphics.o: $(SRCDIR)/graphics.cpp
	$(CXX) $(CFLAGS_RELEASE) $(INC_RELEASE) -c $(SRCDIR)/graphics.cpp -o $(OBJDIR_RELEASE)/graphics.o

$(OBJDIR_RELEASE)/Event.o: $(SRCDIR)/Event.cpp
	$(CXX) $(CFLAGS_RELEASE) $(INC_RELEASE) -c $(SRCDIR)/Event.cpp -o $(OBJDIR_RELEASE)/Event.o

$(OBJDIR_RELEASE)/cameracontrol.o: $(SRCDIR)/cameracontrol.cpp
	$(CXX) $(CFLAGS_RELEASE) $(INC_RELEASE) -c $(SRCDIR)/cameracontrol.cpp -o $(OBJDIR_RELEASE)/cameracontrol.o

$(OBJDIR_RELEASE)/camera.o: $(SRCDIR)/camera.cpp
	$(CXX) $(CFLAGS_RELEASE) $(INC_RELEASE) -c $(SRCDIR)/camera.cpp -o $(OBJDIR_RELEASE)/camera.o

$(OBJDIR_RELEASE)/Timer.o: $(SRCDIR)/Timer.cpp
	$(CXX) $(CFLAGS_RELEASE) $(INC_RELEASE) -c $(SRCDIR)/Timer.cpp -o $(OBJDIR_RELEASE)/Timer.o

$(OBJDIR_RELEASE)/webinterface.o: $(SRCDIR)/webinterface.cpp
	$(CXX) $(CFLAGS_RELEASE) $(INC_RELEASE) -c $(SRCDIR)/webinterface.cpp -o $(OBJDIR_RELEASE)/webinterface.o

clean_release: 
	rm -f $(OBJ_RELEASE) $(OUT_RELEASE)
	rm -rf bin/Release
	rm -rf $(OBJDIR_RELEASE)

.PHONY: before_debug after_debug clean_debug before_release after_release clean_release

install:
	cp bin/Release/gatekeeper /sbin

